#!/usr/bin/env bash

# If user has chosen auto configuration, this script does the following:
# - Create a Procfile.
# - Add gunicorn to requirements.txt.
# - Configure ALLOWED_HOSTS setting to allow serving from Heroku.
# - Configure database so the Heroku postgres instance works.
# - Configure staticfiles.
# - Other?

# This script could be organized quite differently. ie first step could focus
#   on modifying dependencies, then settings, etc. But I think it's much easier
#   to reason about by focusing on each step of the configuration process.
# For example it's better to make all changes necessary for configuring db,
#   then static files, even if that means modifying settings file more than once.

# --- Check AUTCONFIGURE config vars ---
# Check if we should autoconfigure this deploy.
if [ $AUTOCONFIGURE_ALL ]; then
  echo "*****> Auto-configuring this project."
else
  exit 0
fi


# --- Find out if using requirements.txt or Pipfile ---
if [[ -f "$BUILD_DIR/requirements.txt" ]]; then
  using_requirements_txt=true
  echo "       Found requirements.txt file."
fi

if [[ -f "$BUILD_DIR/Pipfile" ]]; then
  using_pipfile=true
  echo "       Found Pipfile."
fi

# --- Procfile ---
# Create Procfile if not present.
if [[ ! -f "$BUILD_DIR/Procfile" ]]; then
    project_path=$(find $BUILD_DIR -maxdepth 5 -type f -name settings.py)
    project_name=$(echo $project_path | sed s:/tmp/build_[a-z0-9]*/:: | sed s:/settings.py::)
    touch "$BUILD_DIR/Procfile"
    echo "web: gunicorn $project_name.wsgi --log-file -" >> "$BUILD_DIR/Procfile"
    
    echo "       Generated Procfile with following process:"
    echo "         web: gunicorn $project_name.wsgi --log-file -"
else
    echo "       Found existing Procfile."
fi

# --- gunicorn ---
# Add gunicorn to dependencies, if not present.
if [[ "$using_requirements_txt" ]]; then
  gunicorn_present=$(cat "$BUILD_DIR/requirements.txt" | grep -c "gunicorn")
  if [ $gunicorn_present -eq 0 ]; then
    echo "gunicorn" >> "$BUILD_DIR/requirements.txt"
    echo "       Added gunicorn to requirements.txt."
  else
    echo "       Found gunicorn in requirements.txt."
  fi
elif [[ "$using_pipfile" ]]; then
  gunicorn_present=$(cat "$BUILD_DIR/Pipfile" | grep -c "gunicorn")
  if [ $gunicorn_present -eq 0 ]; then
    DATA='[packages]\ngunicorn = "*"'
    awk -v r="$DATA" '{gsub(/\[packages\]/,r)}1' Pipfile | xargs -0 echo > PipfileModified && mv PipfileModified Pipfile
    echo "       Added gunicorn to Pipfile."
  else
    echo "       Found gunicorn in Pipfile."
  fi
fi

# --- ALLOWED_HOSTS ---
# If ALLOWED_HOSTS is currently empty, set to ['*'].
echo "       Modifying settings.py:"
sed -i "s/ALLOWED_HOSTS = \[]/ALLOWED_HOSTS = \['*']/" "$BUILD_DIR/$project_name/settings.py"
echo "         Set ALLOWED_HOSTS = ['*']."

# --- Database ---
echo "       Configuring database"
# Add psycopg2 to dependencies, if not present.
if [[ "$using_requirements_txt" ]]; then
  psycopg2_present=$(cat "$BUILD_DIR/requirements.txt" | grep -c "psycopg2")
  if [ $psycopg2_present -eq 0 ]; then
    echo "psycopg2" >> "$BUILD_DIR/requirements.txt"
    echo "         Added psycopg2 to requirements.txt."
  else
    echo "         Found psycopg2 in requirements.txt."
  fi
elif [[ "$using_pipfile" ]]; then
  psycopg2_present=$(cat "$BUILD_DIR/Pipfile" | grep -c "psycopg2")
  if [ $psycopg2_present -eq 0 ]; then
    DATA='[packages]\npsycopg2 = "*"'
    awk -v r="$DATA" '{gsub(/\[packages\]/,r)}1' Pipfile | xargs -0 echo > PipfileModified && mv PipfileModified Pipfile
    echo "       Added psycopg2 to Pipfile."
  else
    echo "       Found psycopg2 in Pipfile."
  fi
fi

# Add dj-database-url to dependencies, if not present.
if [[ "$using_requirements_txt" ]]; then
  ddu_present=$(cat "$BUILD_DIR/requirements.txt" | grep -c "dj-database-url")
  if [ $ddu_present -eq 0 ]; then
    echo "         Adding dj-database-url to requirements.txt."
    echo "dj-database-url" >> "$BUILD_DIR/requirements.txt"
  else
    echo "         Found dj-database-url in requirements.txt."
  fi
elif [[ "$using_pipfile" ]]; then
  ddu_present=$(cat "$BUILD_DIR/Pipfile" | grep -c "dj-database-url")
  if [ $ddu_present -eq 0 ]; then
    DATA='[packages]\ndj-database-url = "*"'
    awk -v r="$DATA" '{gsub(/\[packages\]/,r)}1' Pipfile | xargs -0 echo > PipfileModified && mv PipfileModified Pipfile
    echo "       Added dj-database-url to Pipfile."
  else
    echo "       Found dj-database-url in Pipfile."
  fi
fi

# Modify settings.py to use the heroku database.
echo "         Modifying settings to use Heroku Postgres database."
settings_file="$BUILD_DIR/$project_name/settings.py"
echo -e "\n\nimport dj_database_url" >> $settings_file
echo "DATABASES = {'default': dj_database_url.config(default='postgres://localhost')}" >> $settings_file

# --- Static files ---

echo "       Configuring static files."

# Add whitenoise to dependencies, if not present.
if [[ "$using_requirements_txt" ]]; then
  whitenoise_present=$(cat "$BUILD_DIR/requirements.txt" | grep -c "whitenoise")
  if [ $whitenoise_present -eq 0 ]; then
    echo "         Adding whitenoise to requirements.txt."
    echo "whitenoise" >> "$BUILD_DIR/requirements.txt"
  else
    echo "         Found whitenoise in requirements.txt."
  fi
elif [[ "$using_pipfile" ]]; then
  whitenoise_present=$(cat "$BUILD_DIR/Pipfile" | grep -c "whitenoise")
  if [ $whitenoise_present -eq 0 ]; then
    DATA='[packages]\nwhitenoise = "*"'
    awk -v r="$DATA" '{gsub(/\[packages\]/,r)}1' Pipfile | xargs -0 echo > PipfileModified && mv PipfileModified Pipfile
    echo "       Added whitenoise to Pipfile."
  else
    echo "       Found whitenoise in Pipfile."
  fi
fi

echo "         Configuring settings for static files."
# Configure directories for storing static files.
cat "$BIN_DIR/steps/static_settings_block.txt" >> $settings_file
# Congifure middleware to use whitenoise.
echo "MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')" >> $settings_file

# Create folder for static files.
#   Should verify that this is a reasonable approach.
echo "         Creating directory for storing static files."
[ ! -d "$BUILD_DIR/static" ] && mkdir "$BUILD_DIR/static"

# If using Pipfile, remove Pipfile.lock so it will be updated.
if [[ "$using_pipfile" ]]; then
  rm "$BUILD_DIR/Pipfile.lock"
fi

echo "       Finished auto-configure work."
